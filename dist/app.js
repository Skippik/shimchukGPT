"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const telegraf_1 = require("telegraf");
const filters_1 = require("telegraf/filters");
const dotenv_1 = __importDefault(require("dotenv"));
const startBtn_1 = require("./btns/startBtn");
const fs = require('fs');
const path = require('path');
const absoluteFilePath = path.join(__dirname, './badWords.json');
//
const data = fs.readFileSync(absoluteFilePath, 'utf8');
const badWords = Object.values(JSON.parse(data));
//
dotenv_1.default.config();
const botToken = process.env.BOT_TOKEN;
const bot = new telegraf_1.Telegraf(botToken);
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
bot.start(ctx => {
    const keyboard = (0, startBtn_1.createStartButton)().resize();
    ctx.reply('–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –±–æ—Ç!!!!.', keyboard);
});
//
const escapeRegExp = (str) => {
    return str.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
};
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫–Ω–æ–ø–∫–∏
bot.on((0, filters_1.message)('text'), (ctx) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const messageId = ctx.message.message_id;
        const chatId = ctx.message.chat.id;
        const senderUsername = ctx.message.from.username || '–Ω–µ—Ç_–∏–º–µ–Ω–∏_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è';
        if (ctx.message && ctx.message.text) {
            const originalText = ctx.message.text;
            // –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –≤ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤–∞—Ö
            const escapedBadWords = badWords.map(str => escapeRegExp(str));
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ –∏ –∏—Ö –∑–∞–º–µ–Ω–∞ –Ω–∞ "Hi"
            const filteredText = originalText.replace(new RegExp(escapedBadWords.join('|'), 'gi'), 'Hi');
            // –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
            console.log('–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç:', originalText);
            console.log('–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:', filteredText);
            // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª
            if (originalText !== filteredText) {
                ctx.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${senderUsername}: –û—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ—Ö–æ—Ä–æ—à–µ–µ —Å–ª–æ–≤–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏: ||${originalText}|| –ü–æ—ç—Ç–æ–º—É —è ShimchukGPT –∑–∞–º–µ–Ω–∏–ª –µ–≥–æ –∫–æ—Ç–∏–∫–æ–º üòª‚ù§Ô∏è –í—Å–µ–º –¥–æ–±—Ä–∞\\! –ù–µ –¥–µ–ª–∞–π —Ç–∞–∫ –±–æ–ª—å—à–µ ${senderUsername}`, {
                    parse_mode: 'MarkdownV2',
                });
                yield new Promise(r => setTimeout(r, 3000));
                try {
                    yield ctx.telegram.deleteMessage(chatId, messageId);
                }
                catch (error) {
                    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
                }
            }
        }
    }
    catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
}));
// –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç
try {
    bot.launch();
}
catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞:', error);
}
